# Distributions

```{r}
#| label: setup-distributions

library(Amisc)
library(batchAdj)
library(forcats)
library(scales)
library(patchwork)
library(kableExtra)
library(here)
source(here("validation/cs_classifier.R"))
```

## Histotype Distribution

```{r}
#| label: train-cohort-codeset

train_cohort_codeset <- hist_all_mol %>%
  filter(FileName %in% gsub("^X", "", c(
    cs1_samples_coh, cs2_samples_coh, cs3_samples_coh
  ))) %>%
  droplevels() %>%
  describeBy(
    var.names = "hist_gr2",
    var.labels = "Histotype",
    by1 = "CodeSet",
    test = FALSE,
    total = "bottom",
    bold_var = FALSE,
    fill = TRUE
  )
```

```{r}
#| label: train-qc-codeset

train_qc_codeset <- hist_all_mol %>%
  filter(FileName %in% gsub("^X", "", c(
    cs1_samples_coh_qc, cs2_samples_coh_qc, cs3_samples_coh_qc
  ))) %>% 
  droplevels() %>% 
  describeBy(
    var.names = "hist_gr2",
    var.labels = "Histotype",
    by1 = "CodeSet",
    test = FALSE,
    total = "bottom",
    bold_var = FALSE,
    fill = TRUE
  )
```

```{r}
#| label: train-hist-codeset

train_hist_codeset <- hist %>%
  mutate(hist_final = factor(hist_final,
                             levels = c("HGSC", "CCOC", "ENOC", "MUC", "LGSC"))) %>%
  describeBy(
    var.names = "hist_final",
    var.labels = "Histotype",
    by1 = "CodeSet",
    test = FALSE,
    total = "bottom",
    bold_var = FALSE,
    fill = TRUE
  )
```

```{r}
#| label: train-dedup-codeset

train_dedup_codeset <- hist %>%
  filter(FileName %in% gsub("^X", "", c(
    cs1_dedup$col_name, cs2_dedup$col_name, cs3_dedup$col_name
  ))) %>%
  mutate(hist_final = factor(hist_final,
                             levels = c("HGSC", "CCOC", "ENOC", "MUC", "LGSC"))) %>%
  describeBy(
    var.names = "hist_final",
    var.labels = "Histotype",
    by1 = "CodeSet",
    test = FALSE,
    total = "bottom",
    bold_var = FALSE,
    fill = TRUE
  )
```

```{r}
#| label: train-comb-codeset

train_comb_codeset <- train_ref_comb %>% 
  mutate(hist_final = fct_infreq(hist_final)) %>% 
  describeBy(
    var.names = "hist_final",
    var.labels = "Histotype",
    by1 = "CodeSet",
    test = FALSE,
    total = "bottom",
    bold_var = FALSE,
    fill = TRUE
  )
```

```{r}
#| label: train-derep-codeset

train_derep_codeset <- train_ref %>% 
  mutate(hist_final = fct_infreq(hist_final)) %>% 
  describeBy(
    var.names = "hist_final",
    var.labels = "Histotype",
    by1 = "CodeSet",
    test = FALSE,
    total = "bottom",
    bold_var = FALSE,
    fill = TRUE
  )
```

```{r}
#| label: tbl-hist-codeset
#| tbl-cap: 'Histotype Distribution in Training Set by Processing Stage'
#| tbl-pos: H

hist_codeset <-
  bind_rows(
    train_cohort_codeset,
    train_qc_codeset,
    train_hist_codeset,
    train_dedup_codeset,
    train_comb_codeset,
    train_derep_codeset
  )

hist_codeset |> 
  kbl(booktabs = TRUE, longtable = TRUE, linesep = "") |> 
  kable_styling() |> 
  collapse_rows(columns = 1) |> 
  pack_rows(
    index = c(
      "Selected Cohorts" = 7,
      "QC" = 7,
      "Main Histotypes" = 6,
      "Removed Duplicates" = 6,
      "Normalized and Recombined" = 6,
      "Removed Replicates" = 6
    ),
    indent = FALSE
  )
```

```{r}
#| label: tbl-hist-train-conf-val
#| tbl-cap: 'Histotype Distribution in Training, Confirmation, and Validation Sets'
#| tbl-pos: H

hist_train_conf_val <-
  list(Training = train_ref,
       Confirmation = conf_ref,
       Validation = val_ref) |> 
  map_dfr(~ select(., hist_final), .id = "Data") |> 
  mutate(Data = factor(Data, levels = c("Training", "Confirmation", "Validation")),
         hist_final = factor(hist_final, levels = c("HGSC", "CCOC", "ENOC", "MUC", "LGSC"))) |>
  describeBy(
    var.names = "hist_final",
    var.labels = "Histotype",
    by1 = "Data",
    total = "bottom",
    test = FALSE,
    bold_var = FALSE,
    fill = TRUE
  ) |> 
  select(-Total)

hist_train_conf_val |> 
  kbl(booktabs = TRUE, linesep = "") |> 
  kable_styling() |> 
  collapse_rows(columns = 1)
```

## Cohort Distribution

```{r}
#| label: tbl-cohorts-dist
#| tbl-cap: 'Pre-QC Cohort Distribution by CodeSet'

cohorts_dist <-
  cohorts |> 
  filter(col_name %in% c(cs1_samples_coh, cs2_samples_coh, cs3_samples_coh)) |> 
  mutate(CodeSet = toupper(file_source),
         cohort = factor(
           cohort,
           levels = c(
             "OOU",
             "OOUE",
             "VOA",
             "OVAR3",
             "ICON7",
             "MAYO",
             "DOVE4",
             "TNCO",
             "MTL",
             "JAPAN",
             "POOL-CTRL",
             "POOL-1",
             "POOL-2",
             "POOL-3"
           )
         )) |> 
  tbl_summary(
    by = CodeSet,
    label = list(cohort ~ "Cohort"),
    include = c(CodeSet, cohort)
  ) |> 
  modify_header(label ~ "**CodeSet**")

cohorts_dist |> 
  as_kable_extra(booktabs = TRUE, linesep = "") |> 
  kable_styling()
```

## Quality Control

### Failed Samples

We use an aggregated `QCFlag` that considers a sample to have failed QC if any of the following QC conditions are flagged:

-   Linearity
-   Imaging
-   Smallest Positive Control
-   Normality

```{r}
#| label: tbl-qc-failed
#| tbl-cap: 'Quality Control Summary'

qc_failed <-
  bind_rows(cs1_qc, cs2_qc, cs3_qc) |> 
  droplevels() |> 
  tbl_summary(
    by = CodeSet,
    label = list(
      linFlag ~ "Linearity",
      imagingFlag ~ "Imaging",
      spcFlag ~ "Smallest Positive Control",
      normFlag ~ "Normality",
      QCFlag ~ "Overall QC"
    ),
    include = matches("(?<!bd)Flag", perl = TRUE)
  ) |> 
  bold_labels() |> 
  modify_header(label ~ "**Quality Control Flag**")

qc_failed |> 
  as_kable_extra(booktabs = TRUE, linesep = "") |> 
  kable_styling(full_width = FALSE)
```

### %GD vs. SNR {#sec-gd-vs-nr}

```{r}
#| label: fig-qc-gd-snr-all
#| fig-height: 8
#| fig-width: 7
#| fig-cap: '% Genes Detected vs. Signal to Noise Ratio'

p1 <- ggplot(cs1_qc, aes(snr, pergd, color = normFlag)) +
  geom_point() +
  scale_y_continuous(limits = c(0, 100)) +
  scale_color_manual(values = c("red", "green4")) +
  labs(x = "SNR", y = "% GD", title = "CS1", color = "Flag") +
  theme_bw() +
  theme(plot.title = element_text(colour = "#607C8E"))

p2 <- ggplot(cs2_qc, aes(snr, pergd, color = normFlag)) +
  geom_point() +
  scale_y_continuous(limits = c(0, 100)) +
  scale_color_manual(values = c("red", "green4")) +
  labs(x = "SNR", y = "% GD", title = "CS2", color = "Flag") +
  theme_bw() +
  theme(plot.title = element_text(colour = "#FFA756"))

p3 <- ggplot(cs3_qc, aes(snr, pergd, color = normFlag)) +
  geom_point() +
  scale_y_continuous(limits = c(0, 100)) +
  scale_color_manual(values = c("red", "green4")) +
  labs(x = "SNR", y = "% GD", title = "CS3", color = "Flag") +
  theme_bw() +
  theme(plot.title = element_text(colour = "#259FED"))

p_gd_snr_all <- wrap_plots(list(p1, p2, p3), ncol = 1) +
  plot_annotation(title = "% Genes Detected vs. Signal-to-Noise Ratio",
                  tag_levels = "A") + 
  plot_layout(guides = "collect", axes = "collect") &
  labs(x = "SNR", y = "% GD") &
  geom_vline(xintercept = 100, color = "grey20", linetype = "dashed") &
  geom_hline(yintercept = 50, color = "grey20", linetype = "dashed") &
  scale_x_continuous(labels = scales::label_comma()) &
  theme(panel.grid.minor = element_blank(),
        legend.justification = "top")
print(p_gd_snr_all)
```

```{r}
#| label: fig-qc-gd-snr-zoomed
#| fig-height: 8
#| fig-width: 7
#| fig-cap: '% Genes Detected vs. Signal to Noise Ratio (Zoomed)'

p_gd_snr_zoomed <- p_gd_snr_all +
  plot_annotation(title = "% Genes Detected vs. Signal-to-Noise Ratio (Zoomed)",
                  tag_levels = "A") &
  lims(x = c(0, 2000))
print(p_gd_snr_zoomed)
```

## Pairwise Gene Expression

```{r}
#| label: fig-genes-cs13-rand1
#| fig-height: 10
#| fig-width: 11
#| out-width: '100%'
#| fig-cap: 'Random1-Normalized CS1 vs. CS3 Gene Expression'

genes_cs13_rand1 <- train_ref_comb %>%
  rownames_to_column("FileName") %>%
  group_by(ottaID) %>%
  mutate(n_codeset = n_distinct(CodeSet)) %>%
  filter(all(c("CS1", "CS3") %in% CodeSet)) %>%
  group_by(ottaID, CodeSet) %>%
  filter(n_codeset > 1, !duplicated(ottaID)) %>%
  ungroup() %>%
  pivot_longer(
    cols = where(is.double),
    names_to = "Gene",
    names_ptypes = list(Gene = factor()),
    values_to = "Value"
  ) %>%
  pivot_wider(
    id_cols = c(ottaID, Gene),
    names_from = "CodeSet",
    values_from = c("Value", "FileName")
  ) %>%
  group_by(Gene) %>%
  mutate(Rc = epiR::epi.ccc(Value_CS1, Value_CS3)[["rho.c"]][["est"]]) %>%
  ungroup() %>%
  mutate(Gene = fct_reorder(Gene, Rc, .desc = TRUE),
         Rc = paste0("Rc = ", round(Rc, digits = 3)))

p_genes_cs13_rand1 <-
  ggplot(genes_cs13_rand1, aes(x = Value_CS1, y = Value_CS3)) +
  geom_point() +
  geom_text(
    x = -24,
    y = 5,
    size = 3,
    hjust = 0,
    vjust = 1,
    aes(label = Rc),
    check_overlap = TRUE
  ) +
  geom_abline(slope = 1,
              linetype = "dashed",
              color = "red") +
  facet_wrap(~ Gene, nrow = 8, ncol = 9) +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  labs(
    title = "Random1-Normalized CS1 vs. CS3 Gene Expression",
    subtitle = paste0("Samples=", n_distinct(genes_cs13_rand1[["ottaID"]])),
    x = "CS1",
    y = "CS3"
  )

print(p_genes_cs13_rand1)
```

```{r}
#| label: fig-genes-cs23-rand1
#| fig-height: 10
#| fig-width: 11
#| out-width: '100%'
#| fig-cap: 'Random1-Normalized CS2 vs. CS3 Gene Expression'

genes_cs23_rand1 <- train_ref_comb %>%
  rownames_to_column("FileName") %>%
  group_by(ottaID) %>%
  mutate(n_codeset = n_distinct(CodeSet)) %>%
  filter(all(c("CS2", "CS3") %in% CodeSet)) %>%
  group_by(ottaID, CodeSet) %>%
  filter(n_codeset > 1, !duplicated(ottaID)) %>%
  ungroup() %>%
  pivot_longer(
    cols = where(is.double),
    names_to = "Gene",
    names_ptypes = list(Gene = factor()),
    values_to = "Value"
  ) %>%
  pivot_wider(
    id_cols = c(ottaID, Gene),
    names_from = "CodeSet",
    values_from = c("Value", "FileName")
  ) %>%
  group_by(Gene) %>%
  mutate(Rc = epiR::epi.ccc(Value_CS2, Value_CS3)[["rho.c"]][["est"]]) %>%
  ungroup() %>%
  mutate(Gene = fct_reorder(Gene, Rc, .desc = TRUE),
         Rc = paste0("Rc = ", round(Rc, digits = 3)))

p_genes_cs23_rand1 <-
  ggplot(genes_cs23_rand1, aes(x = Value_CS2, y = Value_CS3)) +
  geom_point() +
  geom_text(
    x = -24,
    y = 5,
    size = 3,
    hjust = 0,
    vjust = 1,
    aes(label = Rc),
    check_overlap = TRUE
  ) +
  geom_abline(slope = 1,
              linetype = "dashed",
              color = "red") +
  facet_wrap(~ Gene, nrow = 8, ncol = 9) +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  labs(
    title = "Random1-Normalized CS2 vs. CS3 Gene Expression",
    subtitle = paste0("Samples=", n_distinct(genes_cs23_rand1[["ottaID"]])),
    x = "CS2",
    y = "CS3"
  )

print(p_genes_cs23_rand1)
```

```{r}
#| label: fig-genes-cs13-hkgenes
#| fig-height: 10
#| fig-width: 11
#| out-width: '100%'
#| fig-cap: 'HKgenes-Normalized CS1 vs. CS3 Gene Expression'

genes_cs13_hkgenes <-
  list(CS1 = cs1_norm, CS3 = cs3_norm) %>%
  imap(~ {
    .x %>%
      rename_all(~ gsub("^X", "", .)) %>%
      pivot_longer(where(is.double),
                   names_to = "FileName",
                   values_to = "Value") %>%
      inner_join(genes_cs13_rand1,
                 by = c("Name" = "Gene", "FileName" = paste0("FileName_", .y))) %>%
      select(Name, FileName, ottaID, Value)
  }) %>%
  reduce(inner_join,
         by = c("Name", "ottaID"),
         suffix = c("_CS1", "_CS3")) %>%
  select(ottaID, Gene = Name, everything()) %>%
  group_by(Gene) %>%
  mutate(Rc = epiR::epi.ccc(Value_CS1, Value_CS3)[["rho.c"]][["est"]]) %>%
  ungroup() %>%
  mutate(Gene = fct_reorder(Gene, Rc, .desc = TRUE),
         Rc = paste0("Rc = ", round(Rc, digits = 3)))

p_genes_cs13_hkgenes <- 
  ggplot(genes_cs13_hkgenes, aes(x = Value_CS1, y = Value_CS3)) +
  geom_point() +
  geom_text(
    x = -24,
    y = 5,
    size = 3,
    hjust = 0,
    vjust = 1,
    aes(label = Rc),
    check_overlap = TRUE
  ) +
  geom_abline(slope = 1,
              linetype = "dashed",
              color = "red") +
  facet_wrap(~ Gene, nrow = 8, ncol = 9) +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  labs(
    title = "HKgenes-Normalized CS1 vs. CS3 Gene Expression",
    subtitle = paste0("Samples=",
                      n_distinct(genes_cs13_hkgenes[["ottaID"]])),
    x = "CS1",
    y = "CS3"
  )

print(p_genes_cs13_hkgenes)
```

```{r}
#| label: fig-genes-cs23-hkgenes
#| fig-height: 10
#| fig-width: 11
#| out-width: '100%'
#| fig-cap: 'HKgenes-Normalized CS2 vs. CS3 Gene Expression'

genes_cs23_hkgenes <-
  list(CS2 = cs2_norm, CS3 = cs3_norm) %>%
  imap(~ {
    .x %>%
      rename_all(~ gsub("^X", "", .)) %>%
      pivot_longer(where(is.double),
                   names_to = "FileName",
                   values_to = "Value") %>%
      inner_join(genes_cs23_rand1,
                 by = c("Name" = "Gene", "FileName" = paste0("FileName_", .y))) %>%
      select(Name, FileName, ottaID, Value)
  }) %>%
  reduce(inner_join,
         by = c("Name", "ottaID"),
         suffix = c("_CS2", "_CS3")) %>%
  select(ottaID, Gene = Name, everything()) %>%
  group_by(Gene) %>%
  mutate(Rc = epiR::epi.ccc(Value_CS2, Value_CS3)[["rho.c"]][["est"]]) %>%
  ungroup() %>%
  mutate(Gene = fct_reorder(Gene, Rc, .desc = TRUE),
         Rc = paste0("Rc = ", round(Rc, digits = 3)))

p_genes_cs23_hkgenes <- 
  ggplot(genes_cs23_hkgenes, aes(x = Value_CS2, y = Value_CS3)) +
  geom_point() +
  geom_text(
    x = -24,
    y = 5,
    size = 3,
    hjust = 0,
    vjust = 1,
    aes(label = Rc),
    check_overlap = TRUE
  ) +
  geom_abline(slope = 1,
              linetype = "dashed",
              color = "red") +
  facet_wrap(~ Gene, nrow = 8, ncol = 9) +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  labs(
    title = "HKgenes-Normalized CS2 vs. CS3 Gene Expression",
    subtitle = paste0("Samples=",
                      n_distinct(genes_cs23_hkgenes[["ottaID"]])),
    x = "CS2",
    y = "CS3"
  )

print(p_genes_cs23_hkgenes)
```
